#include "/opt/gigahorse/gigahorse-toolchain/clientlib/decompiler_imports.dl"
#include "/opt/gigahorse/gigahorse-toolchain/clientlib/memory_modeling/memory_modeling.dl"
#include "/opt/gigahorse/gigahorse-toolchain/clientlib/flows.dl"

.decl IsFlashLoanSelector(selector: symbol)
IsFlashLoanSelector(selector) :-
    (
      IsdYdxFlashLoanSelector(selector);
      IsAaveFlashLoanSelector(selector);
      IsUniswapV2FlashLoanSelector(selector);
      IsUniswapV3FlashLoanSelector(selector);
      IsUniswapV4FlashLoanSelector(selector);
      IsBalancerFlashLoanSelector(selector)
    ).

.decl IsdYdxFlashLoanSelector(selector: symbol)
IsdYdxFlashLoanSelector(selector) :-
    Variable_Value(_, selector),
    match("0x8b418713", selector).                                    // Flash loan callback function:  callFunction(address,(address,uint256),bytes)

.decl IsAaveFlashLoanSelector(selector: symbol)
IsAaveFlashLoanSelector(selector) :-
    Variable_Value(_, selector),
    (
      match("0x920f5c84", selector);                                  // Flash loan callback function:  executeOperation(address[],uint256[],uint256[],address,bytes) Aave V2
      match("0x1b11d0ff", selector)                                   // Flash loan callback function:  executeOperation(address,uint256,uint256,address,bytes) Aave V3
    ).                                    

.decl IsUniswapV2FlashLoanSelector(selector: symbol)
IsUniswapV2FlashLoanSelector(selector) :-
    Variable_Value(_, selector),
    (
      match("0x10d1e85c", selector);                                  // Flash loan callback function: 	uniswapV2Call(address,uint256,uint256,bytes)
      match("0xb2ff9f26", selector);                                  // Flash loan callback function: 	swapV2Call(address,uint256,uint256,bytes)
      match("0x84800812", selector);                                  // Flash loan callback function: 	pancakeCall(address,uint256,uint256,bytes)
      match("0x6c813d29", selector);                                  // Flash loan callback function: 	croDefiSwapCall(address,uint256,uint256,bytes)
      match("0xee872558", selector);                                  // Flash loan callback function: 	executeOperation(address,uint256,uint256,bytes) Aave V1
      match("0x485f3994", selector);                                  // Flash loan callback function: 	waultSwapCall(address,uint256,uint256,bytes)
      match("0x1c8f37b3", selector);                                  // Flash loan callback function: 	pantherCall(address,uint256,uint256,bytes)
      match("0x3fc01685", selector);                                  // Flash loan callback function: 	jetswapCall(address,uint256,uint256,bytes)
      match("0xec78ce50", selector);                                  // Flash loan callback function: 	cafeCall(address,uint256,uint256,bytes)
      match("0x5b3bc4fe", selector);                                  // Flash loan callback function: 	BiswapCall(address,uint256,uint256,bytes)
      match("0x46337f3a", selector);                                  // Flash loan callback function: 	wardenCall(address,uint256,uint256,bytes)
      match("0x81279c7e", selector);                                  // Flash loan callback function: 	dmmSwapCall(address,uint256,uint256,bytes)
      match("0x75908f7c", selector);                                  // Flash loan callback function: 	BSCswapCall(address,uint256,uint256,bytes)
      match("0xcce38761", selector);                                  // Flash loan callback function: 	ThugswapCall(address,uint256,uint256,bytes)
      match("0x21fb6c90", selector);                                  // Flash loan callback function: 	demaxCall(address,uint256,uint256,bytes)
      match("0x9caee113", selector)                                   // Flash loan callback function: 	onFlashLoan(address,uint256,uint256,bytes) Equalizer
    ).

.decl IsUniswapV3FlashLoanSelector(selector: symbol)
IsUniswapV3FlashLoanSelector(selector) :-
    Variable_Value(_, selector),
    (
      match("0xfa461e33", selector);                                  // Flash loan callback function:  uniswapV3SwapCallback(int256,int256,bytes)
      match("0x23a69e75", selector);                                  // Flash loan callback function:  pancakeV3SwapCallback(int256,int256,bytes)
      match("0xfa483e72", selector);                                  // Flash loan callback function:  swapCallback(int256,int256,bytes)
      match("0x3a1c453c", selector)                                   // Flash loan callback function:  solidlyV3SwapCallback(int256,int256,bytes)
    ).
            
.decl IsUniswapV4FlashLoanSelector(selector: symbol)
IsUniswapV4FlashLoanSelector(selector) :-
    Variable_Value(_, selector),
    match("0x91dd7346", selector).                                    // Flash loan callback function:  unlockCallback(bytes)
    
.decl IsBalancerFlashLoanSelector(selector: symbol)
IsBalancerFlashLoanSelector(selector) :-
    Variable_Value(_, selector),
    match("0xf04f2707", selector).                                    // Flash loan callback function:  receiveFlashLoan(address[],uint256[],uint256[],bytes)

.decl EqualityComparison(a: Variable, b: Variable, res: Variable)
EqualityComparison(a, b, res) :-
    EQ(_, a, b, res);
    EQ(_, b, a, res).


.output FlashLoanCallback
.decl FlashLoanCallback(func: Function, selector: symbol)

/**
  Detects whether any flash loan callback functions are implemented.
*/
FlashLoanCallback(func, selector) :-
    PublicFunctionSelector(func, selector),
    IsFlashLoanSelector(selector).                                    // Implements flash loan callback function


.output FlashLoanCallbackCallerCheck
.decl FlashLoanCallbackCallerCheck(type: Value, selector: symbol, callerStmt: Statement, valueStmt: Statement, jmpStmt: Statement)

/**
  Detects whether flash loan callback function implements CALLER check against ADDRESS (e.g., require(msg.sender == address(this))).
*/
FlashLoanCallbackCallerCheck("address", selector, callerStmt, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsFlashLoanSelector(selector),                                    // Implements flash loan callback function
    CALLER(callerStmt, callerVar),
    Statement_Function(callerStmt, func),                             // CALLER instruction is within the flash loan callback function
    ADDRESS(valueStmt, addressVar),
    Statement_Function(valueStmt, func),                              // ADDRESS instruction is within the flash loan callback function
    DataFlows(callerVar, callerEqVar),                                // CALLER instruction flows into equality comparison
    DataFlows(addressVar, addressEqVar),                              // ADDRESS instruction flows into equality comparison
    EqualityComparison(callerEqVar, addressEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).

/**
  Detects whether flash loan callback function implements CALLER check against memory (e.g., require(msg.sender == memory)).
*/
FlashLoanCallbackCallerCheck("memory", selector, callerStmt, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsFlashLoanSelector(selector),                                    // Implements flash loan callback function
    CALLER(callerStmt, callerVar),
    Statement_Function(callerStmt, func),                             // CALLER instruction is within the flash loan callback function
    MLOAD(valueStmt, _, mloadVar),
    Statement_Function(valueStmt, func),                              // Memory instruction is within the flash loan callback function
    DataFlows(callerVar, callerEqVar),                                // CALLER instruction flows into equality comparison
    DataFlows(mloadVar, memoryEqVar),                                 // Memory instruction flows into equality comparison
    EqualityComparison(callerEqVar, memoryEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).

/**
  Detects whether flash loan callback function implements CALLER check against storage (e.g., require(msg.sender == storage)).
*/
FlashLoanCallbackCallerCheck("storage", selector, callerStmt, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsFlashLoanSelector(selector),                                    // Implements flash loan callback function
    CALLER(callerStmt, callerVar),
    Statement_Function(callerStmt, func),                             // CALLER instruction is within the flash loan callback function
    SLOAD(valueStmt, _, sloadVar),
    Statement_Function(valueStmt, func),                              // Storage instruction is within the flash loan callback function
    DataFlows(callerVar, callerEqVar),                                // CALLER instruction flows into equality comparison
    DataFlows(sloadVar, storageEqVar),                                // Storage instruction flows into equality comparison
    EqualityComparison(callerEqVar, storageEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).

/**
  Detects whether flash loan callback function implements CALLER check against constant (e.g., require(msg.sender == 0x...)).
*/
FlashLoanCallbackCallerCheck("constant", selector, callerStmt, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsFlashLoanSelector(selector),                                    // Implements flash loan callback function
    CALLER(callerStmt, callerVar),
    Statement_Function(callerStmt, func),                             // CALLER instruction is within the flash loan callback function
    Variable_Value(valueVar, _),
    Statement_Defines(valueStmt, valueVar, _),
    DataFlows(callerVar, callerEqVar),                                // CALLER instruction flows into equality comparison
    EqualityComparison(callerEqVar, valueVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).


.output FlashLoanCallbackOriginCheck
.decl FlashLoanCallbackOriginCheck(type: Value, selector: symbol, originStmt: Statement, valueStmt: Statement, jmpStmt: Statement)

/**
  Detects whether flash loan callback function implements ORIGIN check against ADDRESS (e.g., require(msg.sender == address(this))).
*/
FlashLoanCallbackOriginCheck("address", selector, originStmt, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsFlashLoanSelector(selector),                                    // Implements flash loan callback function
    ORIGIN(originStmt, originVar),
    Statement_Function(originStmt, func),                             // ORIGIN instruction is within the flash loan callback function
    ADDRESS(valueStmt, addressVar),
    Statement_Function(valueStmt, func),                              // ADDRESS instruction is within the flash loan callback function
    DataFlows(originVar, originEqVar),                                // ORIGIN instruction flows into equality comparison
    DataFlows(addressVar, addressEqVar),                              // ADDRESS instruction flows into equality comparison
    EqualityComparison(originEqVar, addressEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).

/**
  Detects whether flash loan callback function implements ORIGIN check against memory (e.g., require(msg.sender == memory)).
*/
FlashLoanCallbackOriginCheck("memory", selector, originStmt, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsFlashLoanSelector(selector),                                    // Implements flash loan callback function
    ORIGIN(originStmt, originVar),
    Statement_Function(originStmt, func),                             // ORIGIN instruction is within the flash loan callback function
    MLOAD(valueStmt, _, mloadVar),
    Statement_Function(valueStmt, func),                              // Memory instruction is within the flash loan callback function
    DataFlows(originVar, originEqVar),                                // ORIGIN instruction flows into equality comparison
    DataFlows(mloadVar, memoryEqVar),                                 // Memory instruction flows into equality comparison
    EqualityComparison(originEqVar, memoryEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).

/**
  Detects whether flash loan callback function implements ORIGIN check against storage (e.g., require(msg.sender == storage)).
*/
FlashLoanCallbackOriginCheck("storage", selector, originStmt, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsFlashLoanSelector(selector),                                    // Implements flash loan callback function
    ORIGIN(originStmt, originVar),
    Statement_Function(originStmt, func),                             // ORIGIN instruction is within the flash loan callback function
    SLOAD(valueStmt, _, sloadVar),
    Statement_Function(valueStmt, func),                              // Storage instruction is within the flash loan callback function
    DataFlows(originVar, originEqVar),                                // ORIGIN instruction flows into equality comparison
    DataFlows(sloadVar, storageEqVar),                                // Storage instruction flows into equality comparison
    EqualityComparison(originEqVar, storageEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).

/**
  Detects whether flash loan callback function implements ORIGIN check against constant (e.g., require(msg.sender == 0x...)).
*/
FlashLoanCallbackOriginCheck("constant", selector, originStmt, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsFlashLoanSelector(selector),                                    // Implements flash loan callback function
    ORIGIN(originStmt, originVar),
    Statement_Function(originStmt, func),                             // ORIGIN instruction is within the flash loan callback function
    Variable_Value(valueVar, _),
    Statement_Defines(valueStmt, valueVar, _),
    DataFlows(originVar, originEqVar),                                // ORIGIN instruction flows into equality comparison
    EqualityComparison(originEqVar, valueVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).


.output FlashLoanCallbackSenderCheck
.decl FlashLoanCallbackSenderCheck(type: Value, selector: symbol, argVar: Variable, valueStmt: Statement, jmpStmt: Statement)

/**
  Detects whether flash loan callback function implements sender check against ADDRESS (e.g., require(sender == address(this))).
*/
FlashLoanCallbackSenderCheck("address", selector, argVar, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    (
      IsdYdxFlashLoanSelector(selector);
      IsUniswapV2FlashLoanSelector(selector)
    ),                                                                // Implements dYdX/Uniswap V2 flash loan callback function where sender is first parameter
    PublicFunctionArg(func, argVar, 0),                               // First flash loan callback function parameter (i.e., sender)
    ADDRESS(valueStmt, addressVar),
    Statement_Function(valueStmt, func),                              // ADDRESS instruction is within the flash loan callback function
    DataFlows(argVar, argEqVar),                                      // First flash loan callback function parameter flows into equality comparison
    DataFlows(addressVar, addressEqVar),                              // ADDRESS instruction flows into equality comparison
    EqualityComparison(argEqVar, addressEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).    

FlashLoanCallbackSenderCheck("address", selector, argVar, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsAaveFlashLoanSelector(selector),                                // Implements Aave V2/V3 flash loan callback function where sender is fourth parameter
    PublicFunctionArg(func, argVar, 3),                               // Fourth flash loan callback function parameter (i.e., initiator)
    ADDRESS(valueStmt, addressVar),
    Statement_Function(valueStmt, func),                              // ADDRESS instruction is within the flash loan callback function
    DataFlows(argVar, argEqVar),                                      // Fourth flash loan callback function parameter flows into equality comparison
    DataFlows(addressVar, addressEqVar),                              // ADDRESS instruction flows into equality comparison
    EqualityComparison(argEqVar, addressEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar). 

/**
  Detects whether flash loan callback function implements sender check against memory (e.g., require(sender == memory)).
*/
FlashLoanCallbackSenderCheck("memory", selector, argVar, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    (
      IsdYdxFlashLoanSelector(selector);
      IsUniswapV2FlashLoanSelector(selector)
    ),                                                                // Implements dYdX/Uniswap V2 flash loan callback function where sender is first parameter
    PublicFunctionArg(func, argVar, 0),                               // First flash loan callback function parameter (i.e., sender)
    MLOAD(valueStmt, _, mloadVar),
    Statement_Function(valueStmt, func),                              // MLOAD instruction is within the flash loan callback function
    DataFlows(argVar, argEqVar),                                      // First flash loan callback function parameter flows into equality comparison
    DataFlows(mloadVar, memoryEqVar),                                 // MLOAD instruction flows into equality comparison
    EqualityComparison(argEqVar, memoryEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).    

FlashLoanCallbackSenderCheck("memory", selector, argVar, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsAaveFlashLoanSelector(selector),                                // Implements Aave V2/V3 flash loan callback function where sender is fourth parameter
    PublicFunctionArg(func, argVar, 3),                               // Fourth flash loan callback function parameter (i.e., initiator)
    MLOAD(valueStmt, _, mloadVar),
    Statement_Function(valueStmt, func),                              // MLOAD instruction is within the flash loan callback function
    DataFlows(argVar, argEqVar),                                      // Fourth flash loan callback function parameter flows into equality comparison
    DataFlows(mloadVar, memoryEqVar),                                 // MLOAD instruction flows into equality comparison
    EqualityComparison(argEqVar, memoryEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar). 

/**
  Detects whether flash loan callback function implements sender check against storage (e.g., require(sender == storage)).
*/
FlashLoanCallbackSenderCheck("storage", selector, argVar, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    (
      IsdYdxFlashLoanSelector(selector);
      IsUniswapV2FlashLoanSelector(selector)
    ),                                                                // Implements dYdX/Uniswap V2 flash loan callback function where sender is first parameter
    PublicFunctionArg(func, argVar, 0),                               // First flash loan callback function parameter (i.e., sender)
    SLOAD(valueStmt, _, sloadVar),
    Statement_Function(valueStmt, func),                              // SLOAD instruction is within the flash loan callback function
    DataFlows(argVar, argEqVar),                                      // First flash loan callback function parameter flows into equality comparison
    DataFlows(sloadVar, storageEqVar),                                // SLOAD instruction flows into equality comparison
    EqualityComparison(argEqVar, storageEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).    

FlashLoanCallbackSenderCheck("storage", selector, argVar, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsAaveFlashLoanSelector(selector),                                // Implements Aave V2/V3 flash loan callback function where sender is fourth parameter
    PublicFunctionArg(func, argVar, 3),                               // Fourth flash loan callback function parameter (i.e., initiator)
    SLOAD(valueStmt, _, sloadVar),
    Statement_Function(valueStmt, func),                              // SLOAD instruction is within the flash loan callback function
    DataFlows(argVar, argEqVar),                                      // Fourth flash loan callback function parameter flows into equality comparison
    DataFlows(sloadVar, storageEqVar),                                // SLOAD instruction flows into equality comparison
    EqualityComparison(argEqVar, storageEqVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar). 

/**
  Detects whether flash loan callback function implements sender check against constant (e.g., require(sender == 0x...)).
*/
FlashLoanCallbackSenderCheck("constant", selector, argVar, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    (
      IsdYdxFlashLoanSelector(selector);
      IsUniswapV2FlashLoanSelector(selector)
    ),                                                                // Implements dYdX/Uniswap V2 flash loan callback function where sender is first parameter
    PublicFunctionArg(func, argVar, 0),                               // First flash loan callback function parameter (i.e., sender)
    Variable_Value(valueVar, _),
    Statement_Defines(valueStmt, valueVar, _),
    DataFlows(argVar, argEqVar),                                      // First flash loan callback function parameter flows into equality comparison
    EqualityComparison(argEqVar, valueVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar).    

FlashLoanCallbackSenderCheck("constant", selector, argVar, valueStmt, jmpStmt) :-
    PublicFunctionSelector(func, selector),
    IsAaveFlashLoanSelector(selector),                                // Implements Aave V2/V3 flash loan callback function where sender is fourth parameter
    PublicFunctionArg(func, argVar, 3),                               // Fourth flash loan callback function parameter (i.e., initiator)
    Variable_Value(valueVar, _),
    Statement_Defines(valueStmt, valueVar, _),
    DataFlows(argVar, argEqVar),                                      // Fourth flash loan callback function parameter flows into equality comparison
    EqualityComparison(argEqVar, valueVar, resEqVar),
    DataFlows(resEqVar, jmpCondVar),                                  // Result of equality comparison flows into jump condition
    JUMPI(jmpStmt, _, jmpCondVar). 